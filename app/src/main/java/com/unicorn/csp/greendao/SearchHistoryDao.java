package com.unicorn.csp.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.unicorn.csp.greendao.SearchHistory;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table SEARCH_HISTORY.
*/
public class SearchHistoryDao extends AbstractDao<SearchHistory, String> {

    public static final String TABLENAME = "SEARCH_HISTORY";

    /**
     * Properties of entity SearchHistory.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Keyword = new Property(0, String.class, "keyword", true, "KEYWORD");
        public final static Property Type = new Property(1, String.class, "type", false, "TYPE");
    };

    private DaoSession daoSession;


    public SearchHistoryDao(DaoConfig config) {
        super(config);
    }
    
    public SearchHistoryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'SEARCH_HISTORY' (" + //
                "'KEYWORD' TEXT PRIMARY KEY NOT NULL ," + // 0: keyword
                "'TYPE' TEXT);"); // 1: type
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'SEARCH_HISTORY'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, SearchHistory entity) {
        stmt.clearBindings();
 
        String keyword = entity.getKeyword();
        if (keyword != null) {
            stmt.bindString(1, keyword);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(2, type);
        }
    }

    @Override
    protected void attachEntity(SearchHistory entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public SearchHistory readEntity(Cursor cursor, int offset) {
        SearchHistory entity = new SearchHistory( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // keyword
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1) // type
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, SearchHistory entity, int offset) {
        entity.setKeyword(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setType(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(SearchHistory entity, long rowId) {
        return entity.getKeyword();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(SearchHistory entity) {
        if(entity != null) {
            return entity.getKeyword();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
